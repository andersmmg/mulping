#!/bin/env python3

import os
import sys
import json
import argparse
import subprocess

from time import time

RELAYS_LINK = "https://api.mullvad.net/www/relays/all/"
RELAYS_FILE = "/tmp/mulpingData"

TIMESTAMP_INDEX = 0

HOSTNAME = "hostname"
TYPE = "type"
ACTIVE = "active"
COUNTRY_CODE = "country_code"
IPV4 = "ipv4_addr_in"
STBOOT = "stboot"

WIREGUARD = "wireguard"
OPENVPN = "openvpn"
BRIDGE = "bridge"


#############################
# Relay filtering utilities #
#############################


# Returns a function that tests if attribute 't' has value 'v' in relay 'r'
eqAttribute = lambda a, v: (lambda r: a in r and r[a] == v)

# Returns a function that tests if a relay is of type 't'
isType = lambda t: eqAttribute(TYPE, t)

# Returns a function that tests if a relay has country code 'c'
inCountry = lambda c: eqAttribute(COUNTRY_CODE, c)

#Tests if a relay has stboot
hasStboot = eqAttribute(STBOOT, True)

# Tests if a relay is active
isActive = eqAttribute(ACTIVE, True)

# Tests if a relay 'r' is not a bridge
notBridge = lambda r: not isType(BRIDGE)(r)

# Returns a function that given a relay 'r', tests if it fits at least one of the conditions in 'filters'
filterOr = lambda filters: (lambda r: [f(r) for f in filters].count(True) > 0)

# Returns a function that given a relay 'r', tests if it fits all of the conditions in 'filters'
filterAnd = lambda filters: (lambda r: [f(r) for f in filters].count(False) == 0)


##################
# Error handling #
##################


def perror(err):
    print(err, file = sys.stderr)

def failure(err):
    perror(err)
    sys.exit(1)


#########################
# Relays data retrieval #
#########################


def fetchRelays():
    print("Fetching relays... ", end = "")
    sys.stdout.flush()

    # Only import the "requests" module here as it takes
    # significantly longer than the others
    import requests

    try:
        relays = requests.get(f"{RELAYS_LINK}").json()
    except:
        failure("Could not get relays")

    relays.insert(TIMESTAMP_INDEX, time())
    with open(RELAYS_FILE, "w") as f:
        json.dump(relays, f)
    del relays[TIMESTAMP_INDEX]

    print("done!\n")
    return relays

def loadRelays():
    with open(RELAYS_FILE, "r") as f:
        relays = json.loads(f.read())

    if not isinstance(relays[TIMESTAMP_INDEX], (float, int)):
        raise Exception

    # If the data is more than 12 hours old, fetch it again
    if time() - relays[TIMESTAMP_INDEX] >= 43200:
        raise Exception

    # Delete timestamp from final relay list
    del relays[TIMESTAMP_INDEX]

    return relays

def getRelays():
    if os.path.isfile(RELAYS_FILE):
        try:
            relays = loadRelays()
        except:
            relays = fetchRelays()
    else:
        relays = fetchRelays()

    return relays


##################
# Ping utilities #
##################


def parsePing(pingOutput):
    resultsLine = pingOutput.splitlines()[pingOutput.count("\n") - 1]

    if not resultsLine.startswith("rtt"):
        return None, None, None

    rtts = [float(v) for v in resultsLine.split(" ")[3].split("/")]

    return rtts[0], rtts[1], rtts[2]

def ping(addr, count, timeout = 0):
    try:
        # e.g.: ping 0.0.0.0 -nqc1 -W0
        pingProcess = subprocess.run(["ping", addr, "-nqc", str(count), "-W", str(timeout)], capture_output = True)
    except:
        failure("The `ping` program could not be called")

    if pingProcess.returncode != 0:
        return None, None, None

    return parsePing(pingProcess.stdout.decode())


########
# Main #
########


parser = argparse.ArgumentParser(
    prog = "mulping",
    description = "Batch pings utility for Mullvad VPN (not affiliated)",
)

relayConditions = [notBridge, isActive]

parser.add_argument("-c", "--country", action = "store", help = "Filter by country", nargs = "+", required = False)
parser.add_argument("-w", "--wireguard", action = "store_true", help = "Only select WireGuard servers")
parser.add_argument("-o", "--openvpn", action = "store_true", help = "Only select OpenVPN servers")
parser.add_argument("-s", "--stboot", action = "store_true", help = "Only select stboot servers")
parser.add_argument("-t", "--timeout", action = "store", help = "Maximum time to wait for each` ping response")

args = parser.parse_args()

if args.country != None:
	countryConditions = list(map(inCountry, args.country))

	countryFilter = filterOr(countryConditions)	
	relayConditions.append(countryFilter)

if args.wireguard: relayConditions.append(isType(WIREGUARD))
if args.openvpn: relayConditions.append(isType(OPENVPN))
if args.stboot: relayConditions.append(hasStboot)

timeout = 0 if args.timeout == None else float(args.timeout)

relays = list(filter(filterAnd(relayConditions), getRelays()))

if relays == []:
    failure("The conditions specified resulted in no relays")

latencies = []
for r in relays:
    host = r[HOSTNAME]
    address = r[IPV4]

    _, rtt, _ = ping(address, 1, timeout = timeout)
    if rtt == None:
        perror(f"{host:15} -> error")
        continue

    print(f"{host:15} -> {rtt:.3f}ms")

    latencies.append((host, rtt))

if latencies == []:
    failure("No relay could be reached")

lowestLatency = min(latencies, key = lambda e: e[1])
maxLatency = max(latencies, key = lambda e: e[1])

print(f"\nHighest latency host: {maxLatency[0]} ({maxLatency[1]}ms)")
print(f"Lowest latency host: {lowestLatency[0]} ({lowestLatency[1]}ms)")
